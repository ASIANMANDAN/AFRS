package Model.Requests;


import Model.Airport;
import Model.Databases.ReservationDatabase;
import Model.ReservationHierarchy.Itinerary;
import Model.ReservationHierarchy.Reservation;

import java.util.ArrayList;

/**
 * This class represents a request to make a reservation for a specified passenger and a specified itinerary. The
 * itinerary is from the list of itineraries generated by the most recent FlightRequest. The itinerary is identified
 * by its position in the list.
 *
 * @author Daniel Wang dcw2772@rit.edu
 * @author Lindsey Ferretti ljf6974@rit.edu
 * @author Elijah Cantella edc8230@rit.edu
 * @author Meghan Johnson meg5228@rit.edu
 */
public class MakeReservationRequest implements Request {

    private ArrayList<String> requestInfo;
    private ReservationDatabase reservations;
    private ArrayList<Itinerary> lastFlightInfoRequest;
    private Reservation reservation;

    public MakeReservationRequest(ArrayList request, ReservationDatabase reservations, ArrayList<Itinerary> itineraries){
        this.requestInfo = request;
        this.reservations = reservations;
        this.lastFlightInfoRequest = itineraries;
    }

    /**
     * Makes a reservation for a specified passenger and itinerary. Returns an error message if the id is out of range
     * or if the passenger already has a reservation between the origin and destination airport.
     *
     * @return An array list containing a success or error message.
     */
    @Override
    public ArrayList execute() {
        ArrayList<String> results = new ArrayList<>();

        //Check the correct number of fields were entered
        if(requestInfo.size() != 3){
            results.add("error");
            results.add("incorrect number of fields");
            return results;
        }
        //Check the order of fields is correct
        else if(!requestInfo.get(1).matches("[0-9]+")){
            results.add("error");
            results.add("please enter the itinerary number before your name");
            return results;
        }

        int itineraryIdentifier = Integer.parseInt(requestInfo.get(1)) - 1;

        //Check that the itinerary id is in range
        if(itineraryIdentifier >= lastFlightInfoRequest.size() || itineraryIdentifier < 0){
            results.add("error");
            results.add("invalid id");
            return results;
        }

        Itinerary itinerary = lastFlightInfoRequest.get(itineraryIdentifier);
        String passenger = requestInfo.get(2);

        Reservation reservation = new Reservation(passenger, itinerary);
        this.reservation = reservation;

        //Check the passenger doesn't already have a reservation between the origin and destination.
        if(reservations.hasReservation(passenger)){
            ArrayList<Reservation> res = reservations.getReservations(passenger);
            for(Reservation r : res){
                if(r.getOrigin().equals(reservation.getOrigin()) &&
                        r.getDestination().equals(reservation.getDestination())){
                    results.add("error");
                    results.add("duplicate reservation");
                    return results;
                }
            }
        }

        reservations.addReservations(reservation);
        results.add("reserve");
        results.add("successful");
        return results;
    }

    @Override
    public void setRequestInfo(ArrayList<String> requestInfo) {

    }

    /**
     * Undo the reservation by deleting itself from the reservation database
     * @return An array list containing a success message
     */
    public ArrayList<String> undo(){
        ArrayList<String> results = new ArrayList<>();
        String passenger = reservation.getPassengerName();
        Airport origin = reservation.getOrigin();
        Airport destination = reservation.getDestination();

        reservations.removeReservations(passenger, origin, destination);

        results.add("undo");
        results.add("delete");
        results.add(passenger);
        results.add(reservation.getChild(0).toString());

        return results;
    }

    /**
     * Redo the reservation by adding itself back to the reservation database
     * @return An array list containing a success message
     */
    public ArrayList<String> redo(){
        ArrayList<String> results = new ArrayList<>();
        reservations.addReservations(reservation);

        results.add("redo");
        results.add("reserve");
        results.add(reservation.getPassengerName());
        results.add(reservation.getChild(0).toString());

        return results;
    }


}
